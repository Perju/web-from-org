* LEEME
** Para que sirve
Permite exportar un sitio web desde un directorio base indicado. Convirtiendo
los archivos con extensión *.org a html* y copiando este html, las imágenes y
los archivos css a un directorio de publicación.

Para esto ahora hay unas funciones a las que se les indica la carpeta base y la
de publicación y exportan html css e imagenes. Y la ultima funcion se compone de
las tres anteriores para llamarlas de una sola vez.

Si se utilizan enlaces relativos para la publicación como en la configuración,
hay que publicar desde este documento o cuanquier otro que este en la misma
carpeta.

*** Como publicar el sitio web
1. Evaluar las funciones para publicar con =C-c C-c= o =, ,=
2. Modificar segun necesidades la configuración de publicación y evaluar
3. Usar el publish dispatcher de org mode =M-m m e e P x=

** Funciones para publicar
#+begin_src emacs-lisp :results output silent
(defun gen-cfg (name io-dirs args ;; surname files-regex fn-publish
                     &optional extra)
  (let ((base-dir (if (not (string-equal (car args) "html"))
                      (concat (car io-dirs) (car args))
                    (car io-dirs)))
        (publish-dir (if (not (string-equal (car args) "html"))
                         (concat (cadr io-dirs) "/" (car args))
                       (cadr io-dirs))))
    (append `(,(concat name "-" (car args))
              :base-directory ,base-dir
              :base-extension ,(nth 1 args)
              :publishing-directory ,publish-dir
              :publishing-function ,(nth 2 args))
            extra)))

(defun gen-cfg-website (name)
   `(,(concat name "-website")
     :components (,(concat name "-html")
                  ,(concat name "-images"))))

(defun gen-html-tag (tag &optional properties closep)
    (concat "<" tag (apply #'concat properties)
            (if closep
                (concat "></" tag ">")
              "/>")))

(defun gen-css-tag (href)
  (gen-html-tag
   "link" (list " rel=\"stylesheet\""
                " href=\"" href "\""
                " type=\"text/css\"")))

(defun gen-script-tag (src &optional cross)
  (gen-html-tag
   "script" (list " src=\"" src "\"" "type=\"text/javascript\"" cross) t))
#+end_src

** Configuración de publicación
Hay que configurar las variables org-re-reveal-root y org-re-reveal-version para
exportar con la version correcta de Reveal.js.
#+begin_src emacs-lisp
(setq public-dirs '("./org/" "./public_html"))
(setq pages-dirs '("/home/username/org-files/" "./public_html/pages"))

(setq html-args '("html" "org" org-html-publish-to-html))
(setq img-args '("images" "jpg\\|gif\\|png\\|svg" org-publish-attachment))
(setq css-args '("css" "css" org-publish-attachment))
(setq js-args '("scripts" "js" org-publish-attachment))
(setq reveal-args '("revealjs" "org" org-re-reveal-publish-to-reveal))

(setq org-html-postamble t)
(setq org-html-postamble-format
      `(("es" ,(concat
                "<p class=\"author\">Author: %a (%e)</p>\n"
                "<p class=\"creator\">%c</p>\n"
                "<p class=\"validation\">%v</p>\n"
                "<div class=\"scroll-up-btn\"><u></u></div>"))))

(setq org-html-home/up-format
      (concat
       "<div id=\"org-div-home-and-up\">"
       "<a accesskey=\"h\" href=\"%s\"> INDICE </a>"
       "|"
       "<a accesskey=\"H\" href=\"%s\"> INICIO </a>"
       "</div>"))

(setq main-extras
      '(:language "es"
        :exclude "private.org" :recursive nil
        :with-title t :with-date t :with-toc t

        :html-head-include-default-style nil
        :html-doctype "html5" :html-html5-fancy t :section-numbers nil

        :auto-sitemap t :sitemap-title ""
        :html-link-home "/index.html"
        :html-link-up "./index.html"
        :sitemap-sort-files anti-chronologically
        :sitemap-file-entry-format "%d - %t"
        :sitemap-function org-publish-sitemap-default))

(setq jquery-tag
      (gen-script-tag "https://code.jquery.com/jquery-3.6.0.min.js"
                      " crossorigin=\"anonymous\""))

(setq public-extras
      (append main-extras
              (list :html-head
                    (concat
                     (gen-css-tag "./css/org.css") "\n"
                     jquery-tag)
                    :html-head-extra
                    (concat (gen-css-tag "./css/style.css") "\n"
                            (gen-script-tag "./scripts/index.js")))))

(setq pages-extras
      (append main-extras
              (list :html-head
                    (concat (gen-css-tag "../css/org.css") "\n"
                            jquery-tag)
                    :html-head-extra
                    (concat (gen-css-tag "../css/style.css") "\n"
                            (gen-script-tag "../scripts/index.js")))))

(setq public-main (gen-cfg "public" public-dirs html-args public-extras))
(setq public-images (gen-cfg "public" public-dirs img-args))
(setq public-css (gen-cfg "public" public-dirs css-args))
(setq public-js (gen-cfg "public" public-dirs js-args))

(setq pages-main (gen-cfg "pages" pages-dirs html-args pages-extras))
(setq pages-images (gen-cfg "pages" pages-dirs img-args))
(setq pages-revealjs (gen-cfg "pages" pages-dirs reveal-args))

(setq org-publish-project-alist
      `(,public-main ,public-images ,public-css, public-js
        ,(gen-cfg-website "public" )

        ,pages-main ,pages-images ,pages-revealjs
        ,(gen-cfg-website "pages" )))
#+end_src
** Archivo simple de configuración
Script para ejecutar el build-site.el con el org-mode que viene con emacs y evitar que sucedan cosas raras con nuestra configuración personal.
#+begin_src shell
#!/bin/sh
emacs -Q --script build-site.el
#+end_src

Script en emacs-lisp para publicar el sitio
#+begin_src emacs-lisp
;; Para acceder desde fuera con httpd-serve-directory
;;(setq httpd-host "0.0.0.0")

;; Donde instalar los paquetes
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Inicializar el sistema de paquetes
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; instalar dependencias
(package-install 'htmlize)

;; Cargar el sistema de publicación
(require 'ox-publish)

;; Personaliza la salida HTML
(setq org-html-validation-link nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />
<link rel=\"stylesheet\" href=\"https://perju.github.io/web-from-org/css/org-todo.css\" />")

;; definir el proyecto a publicar
(setq org-publish-project-alist
      '(
        ("mi-sitio-org"
         :recursive t
         :base-directory "./org"
         :publishing-directory "~/docs"
         :publishing-function org-html-publish-to-html
         :with-author nil
         :with-creator t
         :with-toc t
         :section-numbers nil
         :time-stamp-file nil
         :title "Mi sitio org"
         :auto-preamble nil
         :html-preamble "<div id=\"navbar\"> <ul>
  <li><a href=\"/index.html\">Home</a></li>
  <li><a href=\"/lista-de-tareas/01-Agenda.TODO.html\">Lista de tareas</a></li>
</ul><hr></div>")

        ("org-static"
         :base-directory "./org"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/docs"
         :recursive t
         :publishing-function org-publish-attachment)))

;; Publicar el sitio
(org-publish-project "mi-sitio-org")
(org-publish-project "org-static")

(message "Build complete!")
#+end_src
