* LEEME
** Para que sirve
Permite exportar un sitio web desde un directorio base indicado. Convirtiendo
los archivos con extensión *.org a html* y copiando este html, las imágenes y
los archivos css a un directorio de publicación.

Para esto ahora hay unas funciones a las que se les indica la carpeta base y la
de publicación y exportan html css e imagenes. Y la ultima funcion se compone de
las tres anteriores para llamarlas de una sola vez.

Si se utilizan enlaces relativos para la publicación como en la configuración,
hay que publicar desde este documento o cuanquier otro que este en la misma
carpeta.

*** Como publicar el sitio web
1. Evaluar las funciones para publicar con =C-c C-c= o =, ,=
2. Modificar segun necesidades la configuración de publicación y evaluar
3. Usar el publish dispatcher de org mode =M-m m e e P x=

** Funciones para publicar
#+begin_src emacs-lisp :results output silent
(defun gen-cfg (name io-dirs args ;; surname files-regex fn-publish
                     &optional extra)
  (let ((pkg-name (if (not (string-equal (car args) ""))
                      (concat name "-" (car args))
                    name) ))
    (append `(,pkg-name
              :base-directory ,(concat (car io-dirs) (car args))
              :base-extension ,(nth 1 args)
              :publishing-directory ,(if (not (string-equal (car args) ""))
                                         (concat (cadr io-dirs) "/" (car args))
                                       (cadr io-dirs))
              :publishing-function ,(nth 2 args))
            extra)))

(defun gen-cfg-website (name)
   `(,(concat name "-website")
     :components (,(concat name "")
                  ,(concat name "-images")
                  ,(concat name "-css"))))
#+end_src

** Configuración de publicación
#+begin_src emacs-lisp
(setq public-dirs '("./org/" "./public_html"))
(setq pages-dirs '("/home/username/org-files/" "./public_html/pages"))

(setq main-args '("" "org" org-html-publish-to-html))
(setq img-args '("images" "jpg\\|gif\\|png\\|svg" org-publish-attachment))
(setq css-args '("css" "css" org-publish-attachment))
(setq reveal-args '("revealjs" "org" org-re-reveal-publish-to-reveal-client))

(setq main-extras
      '(:language "es"
        :exclude "private.org" :recursive nil
        :with-title t :with-date t :with-toc t

        :html-doctype "html5" :html-html5-fancy t :section-numbers nil
        :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"

        :auto-sitemap t :sitemap-title ""
        :sitemap-sort-files anti-chronologically
        :sitemap-file-entry-format "%d - %t"
        :sitemap-function org-publish-sitemap-default))

(setq public-main (gen-cfg "public" public-dirs main-args main-extras))
(setq public-images (gen-cfg "public" public-dirs img-args))
(setq public-css (gen-cfg "public" public-dirs css-args))

(setq pages-main (gen-cfg "pages" pages-dirs main-args main-extras))
(setq pages-images (gen-cfg "pages" pages-dirs img-args))
(setq pages-css (gen-cfg "pages" pages-dirs css-args))
(setq pages-reveljs (gen-cfg "pages" pages-dirs reveal-args))

(setq org-publish-project-alist
      `(,public-main ,public-images ,public-css
        ,(gen-cfg-website "public" )

        ,pages-main  ,pages-images ,pages-css
        ,(gen-cfg-website "pages" )))
#+end_src
