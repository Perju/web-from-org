* LEEME
** Para que sirve
Permite exportar un sitio web desde un directorio base indicado. Convirtiendo
los archivos con extensión *.org a html* y copiando este html, las imágenes y
los archivos css a un directorio de publicación.

Para esto ahora hay unas funciones a las que se les indica la carpeta base y la
de publicación y exportan html css e imagenes. Y la ultima funcion se compone de
las tres anteriores para llamarlas de una sola vez.

Si se utilizan enlaces relativos para la publicación como en la configuración,
hay que publicar desde este documento o cuanquier otro que este en la misma
carpeta.

*** Como publicar el sitio web
1. Evaluar las funciones para publicar con =C-c C-c= o =, ,=
2. Modificar segun necesidades la configuración de publicación y evaluar
3. Usar el publish dispatcher de org mode =M-m m e e P x=

** Funciones para publicar
#+begin_src emacs-lisp :results output silent
(defun gen-cfg-publish (name bdir pdir)
  "Crea listas de publicación para nuestros sitios, recibiento
tres parametros, name, basedir y publishdir."
  `(,(concat name)
   :base-directory ,(concat bdir)
   :base-extension "org"
   :publishing-directory ,(concat pdir)
   :publishing-function org-html-publish-to-html

   :language "es"
   :exclude "private.org"
   :recursive nil
   :with-title t
   :with-date t
   :with-toc t

   :html-doctype "html5"
   :html-html5-fancy t
   :section-numbers nil

   :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"

   :auto-sitemap t
   :sitemap-title ""
   :sitemap-sort-files anti-chronologically
   :sitemap-file-entry-format "%d - %t"
   :sitemap-function org-publish-sitemap-default))

(defun gen-cfg-images (name bdir pdir)
  `(,(concat name "-images")
    :base-directory ,(concat bdir "images")
    :base-extension "jpg\\|gif\\|png\\|svg"
    :publishing-directory ,(concat pdir "/images")
    :publishing-function org-publish-attachment))

(defun gen-cfg-css (name bdir pdir)
  `(,(concat name "-css")
    :base-directory ,(concat bdir "css")
    :base-extension "css"
    :publishing-directory ,(concat pdir "/css")
    :publishing-function org-publish-attachment))

(defun gen-cfg-revealjs (name bdir pdir)
  `(,(concat name "-revealjs")
    :base-directory ,(concat bdir "revealjs")
    :base-extension "org"
    :publishing-directory ,(concat pdir "/revealjs")
    :publishing-function org-re-reveal-publish-to-reveal-client))

(defun gen-cfg-website (name)
   `(,(concat name "-website")
     :components (,(concat name "")
                  ,(concat name "-images")
                  ,(concat name "-css"))))
#+end_src

** Configuración de publicación
#+begin_src emacs-lisp
(setq base-dir "./org/")
(setq publish-dir "./public_html")

(setq base-dir-extra "/home/username/org-files/")
(setq publish-dir-extra (concat publish-dir "/pages"))

(setq org-publish-project-alist
      `(,(gen-cfg-publish "public" base-dir publish-dir)
        ,(gen-cfg-images "public" base-dir publish-dir)
        ,(gen-cfg-css "public" base-dir publish-dir)
        ,(gen-cfg-website "public" )

        ,(gen-cfg-publish "pages" base-dir-extra publish-dir-extra)
        ,(gen-cfg-images "pages" base-dir-extra publish-dir-extra)
        ,(gen-cfg-css "pages" base-dir publish-dir-extra)
        ,(gen-cfg-revealjs "pages" base-dir-extra publish-dir-extra)
        ,(gen-cfg-website "pages" )))
#+end_src
